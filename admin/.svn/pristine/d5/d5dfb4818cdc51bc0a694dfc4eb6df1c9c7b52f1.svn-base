<template>
    <div class='sideBarContainer'>
        <el-menu class="el-menu-vertical-demo" :default-active='defaultActive' :default-openeds='defaultOpeneds' @select='select' @open="handleOpen" @close="handleClose" :collapse="sideBarIsCollapse" theme='dark' mode='vertical' :router='true'>
            <template v-for='levelOneItem in routerData'>
                <!-- 第一层 -->
                <el-submenu v-if='levelOneItem.hasSubMenu && !levelOneItem.hidden' :index='levelOneItem.path' :key='levelOneItem.name'>
                    <!-- 第二层 -->
                    <template slot='title'>
                        <i class="el-icon-message"></i>
                        <span slot="title">{{levelOneItem.alias}}</span>
                    </template>
                    <template v-for='levelTwoItem in levelOneItem.children'>
                        <el-submenu v-if='levelTwoItem.hasSubMenu && !levelTwoItem.hidden' :index='levelOneItem.path + "/" + levelTwoItem.path' :key='levelTwoItem.name'>
                            <template slot='title'>
                                <i class="el-icon-message"></i>
                                <span slot="title">{{levelTwoItem.alias}}</span>
                            </template>
                            <template v-for='levelThreeItem in levelTwoItem.children'>
                                <!-- 第三层 -->
                                <el-menu-item v-if='!levelThreeItem.hidden' :key='levelThreeItem.name' :index='levelOneItem.path + "/" + levelTwoItem.path + "/" + levelThreeItem.path' @click='menuIsClicked(levelThreeItem)'>
                                    <i class="el-icon-menu"></i>
                                    <span slot='title'>{{levelThreeItem.alias}}</span>
                                </el-menu-item>
                            </template>
                        </el-submenu>

                        <!-- 第二层 -->
                        <el-menu-item v-else-if='!levelTwoItem.hidden' :key='levelTwoItem.name' :index='levelOneItem.path + "/" + levelTwoItem.path' @click='menuIsClicked(levelTwoItem)'>
                            <i class="el-icon-menu"></i>
                            <span slot='title'>{{levelTwoItem.alias}}</span>
                        </el-menu-item>
                    </template>
                </el-submenu>
                <!-- 第一层 -->
                <el-menu-item v-else-if='!levelOneItem.hidden' :key='levelOneItem.name' :index='levelOneItem.path' @click='menuIsClicked(levelOneItem)'>
                    <i class="el-icon-menu"></i>
                    <span slot='title'>{{levelOneItem.alias}}</span>
                </el-menu-item>
            </template>
        </el-menu>
    </div>
</template>

<script>
import { mapState, mapMutations } from 'vuex'
import { routerData } from '../../router'

export default {
    name: 'SideBar',
    data() {
        return {
            routerData,
            defaultOpeneds: [],
            defaultActive: '/'
        };
    },
    computed: mapState([
        'sideBarIsCollapse',
        'curNavBarTabTagClicked',
        'curTagPathClicked'
    ]),
    methods: {
        ...mapMutations([
            'addNavBarTabTag'
        ]),
        handleOpen() {
            // console.log(key, keyPath);
        },
        handleClose() {
            // console.log(key, keyPath);
        },
        select() {
            // console.log('select-->', index, arr2)
        },
        menuIsClicked(item) {
            // 添加新的tab标签对象到数据源中
            this.addNavBarTabTag({
                alias: item.alias,
                routeName: item.name,
                clicked: true
            })
        },
        computeRoutePath(routeName) {
            // 根据 routeName 寻找对应的 path
            let result
            let ok = false
            routerData.forEach(one => {
                if (one.name === routeName && !ok) {
                    result = one.path
                    ok = true
                }
                if (one.hasSubMenu && !ok) {
                    one.children.forEach(two => {
                        if (two.name === routeName && !ok) {
                            result = `${one.path}/${two.path}`
                            ok = true
                        }
                        if (two.hasSubMenu && !ok) {
                            two.children.forEach(three => {
                                if (three.name === routeName && !ok) {
                                    result = `${one.path}/${two.path}/${three.path}`
                                    ok = true
                                }
                            })
                        }
                    })
                }
            })
            return result
        }
    },
    watch: {
        curNavBarTabTagClicked(routeName) {
            // 获取对应path
            const path = this.computeRoutePath(routeName)
            // 根据改变侧栏对应的active属性
            // this.defaultActive = path
            // 动态改变路由
            this.$router.push(path)
        },
        curTagPathClicked(routePath) {
            this.defaultActive = routePath
        }
    }
}
</script>

<style scoped>
.sideBarContainer {
    width: fit-content;
    background: green;
    position: fixed;
    top: 0;
    left: 0;
    height: 100%;
}

.el-menu-vertical-demo {
    height: 100%;
}

.el-menu-vertical-demo:not(.el-menu--collapse) {
    text-align: left;
    width: 200px;
}
</style>